// 数据比较大，需要用到高精度 
/* 非高精度完整代码
#include <iostream>
#include <cstdio>
#include <cstring>
using namespace std;
int main(){
	int n;
	cin >> n;
	long long f[10000];
	f[1] = 1;
	for(int i=2; i<=n; i++)
		f[i] = 2*f[i-1]+1;
	cout << 2*f[n];  // 找到规律f[2n]=2*f[n]
	return 0;
}
*/
//高精度修正代码
#include <iostream>
#include <cstdio>
#include <cstring>
using namespace std;
int a[1000], b[1000], c[1000]; //高精度存放数字 

void Big(int t){ //倒序相加 c=a+b+t(t放在jw)
	int x = a[0];  //长度
	int jw = t; //后面要加1,提前放这里 
	for(int i=1; i<=x; i++){
		c[i] = a[i]+b[i]+jw;
		jw = c[i]/10;
		c[i] %= 10; 
	} 
	if(jw>0)
		c[++x] = jw;
	c[0] = x; //保存最终的长度 
}

int main(){
	int n;
	cin >> n;
	if(n==1){
		cout << "1";
		return 0;
	}
	a[0] = 1;  //数字的长度 
	a[1] = 1;  //相当于f[i]=1;
	memcpy(b, a, sizeof(a)); //b=a;
	for(int i=2; i<=n; i++){ //循环计算次数 
		Big(1); //计算f[i]=2*f[i-1]+1; //c=2*a+1;
		memcpy(a, c, sizeof(c)); //a=c
		memcpy(b, c, sizeof(c)); //b=c
	}
	// 倒序输出
	Big(0); //f[2n] = 2f[n]; 
	for(int i=c[0]; i>=1; i--)
		cout << c[i];
	return 0;
}
