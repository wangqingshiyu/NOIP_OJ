#include <iostream>
#include <queue>
using namespace std;
int n, k, cur;
struct data{
	int v, step;
};
queue <data> q;
bool a[2000001];

int bfs(){
	while(!q.empty()){
		data t = q.front();
		q.pop();
		if(t.v+1<=k && !a[t.v+1]){ // 向前走一步
			q.push((data){t.v+1, t.step+1});
		//	cout << cur++ << "  " << q.back().v << ", " << q.back().step << endl;
			a[t.v+1] = true;
			if(t.v+1 == k)
				return t.step+1;
		}
		if(t.v-1>=0 && !a[t.v-1]){ // 往回走一步（向后）
			q.push((data){t.v-1, t.step+1});
		//	cout << cur++ << "  " << q.back().v << ", " << q.back().step << endl;
			a[t.v-1] = true;
			if(t.v-1 == k)
				return t.step+1;
		}
		if(t.v*3<k*2 && !a[t.v*2]){ // 向前翻倍，条件是当前走比翻倍后往回走要长，即 k-n > 2n-k ,化简即可  
			q.push((data){t.v*2, t.step+1});
		//	cout << cur++ << "  " << q.back().v << ", " << q.back().step << endl;
			a[t.v*2] = true;
			if(t.v*2 == k)
				return t.step+1;
		}
	}
	
}

int main(){
	cin >> n >> k;
	if(n == k){
		cout << "0";
		return 0;
	}
	q.push((data){n, 0});
//	cout << cur++ << "  " << q.back().v << ", " << q.back().step << endl;
	a[n] = true;
	cout << bfs();
	return 0;
}
