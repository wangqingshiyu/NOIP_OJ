#include <iostream>
#include <queue>
#include <cstring>
using namespace std;
bool Prim[10001];
struct data{
	int v, step;
};
queue <data> q;

void IsPrime(){ // 筛法打表 
	memset(Prim, true, sizeof(Prim));
	for(int i=2; i<=100; i++){
		if(Prim[i]){
			int t = 10000/i;
			for(int j=2; j<=t; j++)
				Prim[i*j] = false;
		}
	}
}

int bfs(int x, int y){
	if(x==y)
		return 0;
	while(!q.empty()){
		data u = q.front();
		q.pop();
		int ge, shi, bai, qian, t;
		ge = u.v%10;
		shi = u.v/10%10;
		bai = u.v/100%10;
		qian = u.v/1000;
		for(int i=0; i<=9; i++){
			t = u.v-ge+i;
			if(i!=ge && Prim[t])
				q.push((data){t, u.step+1});
			if(t==y)
				return u.step+1;
		}
		for(int i=0; i<=9; i++){
			t = u.v-shi*10+i*10;
			if(i!=shi && Prim[t])
				q.push((data){t, u.step+1});
			if(t==y)
				return u.step+1;
		}
		for(int i=0; i<=9; i++){
			t = u.v-bai*100+i*100;
			if(i!=bai && Prim[t])
				q.push((data){t, u.step+1});
			if(t==y)
				return u.step+1;
		}
		for(int i=1; i<=9; i++){
			t = u.v-qian*1000+i*1000;
			if(i!=qian && Prim[t])
				q.push((data){t, u.step+1});
			if(t==y)
				return u.step+1;
		}
	}	
}

int main(){
	IsPrime();
	int n, x, y;
	cin >> n;
	for(int i=1; i<=n; i++){
		cin >> x >> y;
		while(!q.empty()) // 每次清空队列 
			q.pop();
		q.push((data){x, 0});
		cout << bfs(x, y) << endl;
	}
	return 0;
}
