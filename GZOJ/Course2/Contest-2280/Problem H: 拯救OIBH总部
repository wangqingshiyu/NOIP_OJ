#include <iostream>
#include <queue>
using namespace std;
struct data{
	int x, y;
};
queue <data> q;
int n, m;
int a[510][510];
int d[4][2] = {{-1, 0}, {0, 1}, {1, 0}, {0, -1}};

void bfs(){
	while(!q.empty()){
		data u = q.front();
		q.pop();
		int tx, ty;
		for(int i=0; i<4; i++){
			tx = u.x+d[i][0];
			ty = u.y+d[i][1];
			if(tx>=1 && tx<=n && ty>=1 && ty<=m && a[tx][ty]==0){
				q.push((data){tx, ty});
				a[tx][ty] = 1;
			}
		}
	}
}

int tj(){
	int c = 0;
	for(int i=1; i<=n; i++)
		for(int j=1; j<=m; j++)
			if(a[i][j]==0)
				c++;
	return c;
}

int main(){
	char ch;
	cin >> n >> m;
	for(int i=1; i<=n; i++)
		for(int j=1; j<=m; j++){
			cin >> ch;
			if(ch=='*')
				a[i][j] = -1;
			if(ch=='0')
				a[i][j] = 0;
		}
    // ÕÒ×îÍâÒ»²ãµÄÍ»ÆÆ¿Ú 
	for(int j=1; j<=m; j++){ // top
		if(a[1][j]==0){
			q.push((data){1, j});
			a[1][j]=1;
		}
	}
	for(int j=1; j<=m; j++){ // bottom
		if(a[n][j]==0){
			q.push((data){n, j});
			a[n][j]=1;
		}
	}
	for(int i=1; i<=n; i++){ // left
		if(a[i][1]==0){
			q.push((data){i, 1});
			a[i][1]=1;
		}
	}
	for(int i=1; i<=n; i++){ // right
		if(a[i][m]==0){
			q.push((data){i, m});
			a[i][m]=1;
		}
	}
	bfs();
	cout << tj();
	return 0;
}
